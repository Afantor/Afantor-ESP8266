#include <ESP8266WiFi.h>
#include <ESP_SSD1306.h>
#include <SPI.h>            // only for compilation
#include <Wire.h>
#include <Button.h>
#include <Adafruit_GFX.h>

#define BUTTON_PIN D2
#define PULLUP true
#define INVERT true
#define DEBOUNCE_MS 20

#define OLED_RESET  16
#define PIN_SDA D7
#define PIN_SCL D6
#define I2C_ADDRESS 0x3c

#define HWX_LOGO_W 128
#define HWX_LOGO_H 49
#define OLED_WIDTH 128
#define OLED_HEIGHT 64

Button btn(BUTTON_PIN, PULLUP, INVERT, DEBOUNCE_MS);
ESP_SSD1306 oled(OLED_RESET);

unsigned long pressedAtMillis;
unsigned long const interval = 5000;
unsigned long pressedForMillis;

// hortonworks logo for a splash screen
byte img[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0xfc, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x3, 0xfe, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x10, 0x0, 0x0, 0x0, 0x7b, 0xfe, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1f, 0x0, 0x0, 0xf, 0xf3, 0xff, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x3f, 0xa0, 0x0, 0x1f, 0xf7, 0xff, 0x7e, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x9e, 0x0, 0x1f, 0xf7, 0xff, 0x3f, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0xf, 0xbf, 0xdb, 0x0, 0x3f, 0xf3, 0xff,
    0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x80, 0x0, 0x7f, 0x7f, 0xdf, 0x0, 0x7f,
    0xf9, 0xff, 0x9f, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf, 0xd8, 0x0, 0xff, 0x7f,
    0xcf, 0x80, 0xff, 0xfc, 0xff, 0xdf, 0x80, 0x0, 0x0, 0x0, 0x1, 0xcf, 0xda,
    0x1, 0xff, 0x3f, 0xef, 0x80, 0xff, 0xfe, 0x7f, 0xcf, 0x80, 0x0, 0x0, 0x0,
    0xf, 0xdf, 0xce, 0x1, 0xff, 0x9f, 0xe7, 0xc1, 0xff, 0xff, 0x9f, 0xe7, 0x80,
    0x0, 0x0, 0x0, 0x1f, 0xdf, 0xef, 0x3, 0xff, 0xcf, 0xf7, 0xc1, 0x7f, 0xff,
    0xcf, 0xe3, 0x80, 0x0, 0x0, 0x0, 0x1f, 0xcf, 0xe7, 0x3, 0xff, 0xf7, 0xf1,
    0xc1, 0x3f, 0xff, 0xe0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x3f, 0xe7, 0xf7, 0x87,
    0xff, 0xf9, 0xf9, 0xc1, 0x1f, 0xff, 0xf8, 0x3, 0x80, 0x0, 0x0, 0x0, 0x7f,
    0xf3, 0xf3, 0x84, 0xff, 0xfc, 0x1, 0xc2, 0xdf, 0xff, 0xfe, 0x3, 0x80, 0x0,
    0x0, 0x0, 0x7f, 0xfc, 0xf1, 0x84, 0xff, 0xff, 0x81, 0xc2, 0xdf, 0xff, 0xfe,
    0x3, 0x88, 0x0, 0x0, 0x0, 0x5f, 0xfe, 0x1, 0x8a, 0x7f, 0xff, 0xc1, 0xc0,
    0xcf, 0xfe, 0x3f, 0x3, 0x8c, 0x0, 0x0, 0x0, 0xf, 0xff, 0x81, 0x8b, 0x7f,
    0xe7, 0xc1, 0xc0, 0xef, 0xe0, 0x9f, 0x3, 0x80, 0x0, 0x0, 0x0, 0x2f, 0xff,
    0xc1, 0x83, 0x7f, 0x3, 0xc1, 0x81, 0xef, 0x81, 0xdf, 0x1, 0xb0, 0x0, 0x0,
    0x0, 0x2f, 0xe1, 0xc1, 0x83, 0x3c, 0x1b, 0xc0, 0x99, 0xe7, 0x81, 0xcf, 0x0,
    0x38, 0x0, 0x0, 0x0, 0x67, 0x5, 0xe1, 0xa7, 0x3c, 0x19, 0xe0, 0x11, 0xe7,
    0x81, 0xcf, 0x80, 0x0, 0x0, 0x0, 0x0, 0x77, 0x4, 0xe0, 0x7, 0x3c, 0x19,
    0xe0, 0x1, 0xc7, 0x81, 0xc7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x67, 0x4, 0xe0, 0x7,
    0x1c, 0x18, 0xe0, 0x1, 0xc3, 0x81, 0xc3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x63,
    0xc, 0x70, 0x7, 0x1c, 0x18, 0xf0, 0x1, 0xc3, 0xc1, 0xc3, 0xc0, 0x0, 0x0,
    0x0, 0x0, 0x63, 0xc, 0x70, 0x7, 0x1c, 0x18, 0x70, 0x1, 0xc3, 0xc1, 0xc1,
    0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x70, 0x38, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x14, 0x70, 0x38, 0x0, 0x0, 0xe, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x2a, 0x70, 0x38, 0x0, 0x0,
    0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x34, 0x70, 0x38,
    0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x14,
    0x70, 0x38, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0,
    0x0, 0x0, 0x70, 0x38, 0x7e, 0xf, 0xdf, 0x87, 0xe0, 0xff, 0x38, 0x70, 0xe3,
    0xf0, 0xfd, 0xc7, 0x8f, 0xc0, 0x7f, 0xf8, 0xff, 0x9f, 0xdf, 0xcf, 0xf8,
    0xff, 0xb8, 0x70, 0xe7, 0xf8, 0xff, 0xcf, 0x9f, 0xe0, 0x7f, 0xf9, 0xf7,
    0xdf, 0xdf, 0x9f, 0x7c, 0xff, 0x9c, 0xf9, 0xcf, 0x7c, 0xfd, 0xcf, 0x3c,
    0xf0, 0x7f, 0xf9, 0xc1, 0xde, 0xe, 0x1c, 0x1c, 0xe1, 0xdc, 0xf9, 0xde, 0x1e,
    0xf1, 0xfe, 0x38, 0x0, 0x7f, 0xfb, 0xc1, 0xce, 0xe, 0x3c, 0x1c, 0xe1, 0xdc,
    0xf9, 0xdc, 0xe, 0xe1, 0xfc, 0x3f, 0x80, 0x70, 0x3b, 0x81, 0xdc, 0xe, 0x38,
    0x1c, 0xe1, 0xcc, 0xd9, 0x9c, 0xe, 0xe1, 0xfc, 0x1f, 0xe0, 0x70, 0x3b, 0x81,
    0xcc, 0xe, 0x3c, 0x1c, 0xe1, 0xcf, 0xdf, 0x9c, 0xe, 0xe1, 0xfe, 0x7, 0xf0,
    0x70, 0x39, 0xc1, 0xcc, 0x7, 0x1c, 0x1c, 0xe1, 0xcf, 0xdf, 0x9c, 0x1e, 0xe1,
    0xef, 0x0, 0x70, 0x70, 0x39, 0xe3, 0xdc, 0x7, 0x1e, 0x3c, 0xe1, 0xc7, 0x8f,
    0x9e, 0x3c, 0xe1, 0xc7, 0x3c, 0x70, 0x70, 0x38, 0xff, 0x9c, 0x7, 0xcf, 0xf8,
    0xe1, 0xc7, 0x8f, 0xf, 0xfc, 0xe1, 0xc7, 0x9f, 0xf0, 0x70, 0x38, 0x7f, 0x1c,
    0x3, 0xc7, 0xf0, 0xe1, 0xc7, 0x8f, 0x7, 0xf8, 0xe1, 0xc3, 0xdf, 0xe0, 0x0,
    0x0, 0x1c, 0x8, 0x0, 0x81, 0xc0, 0xc0, 0x83, 0x6, 0x1, 0xe0, 0x40, 0x81,
    0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0 };

void splashLogo() {
  oled.clearDisplay();
  // center the logo
  oled.drawBitmap((OLED_WIDTH - HWX_LOGO_W) / 2,
                  (OLED_HEIGHT - HWX_LOGO_H) / 2,
                  img, HWX_LOGO_W, HWX_LOGO_H, WHITE);
  oled.display();
}

void setup() {
  Serial.begin(115200);
//  Wire.setClock(400000);
  Wire.begin(PIN_SDA, PIN_SCL);
  oled.begin(SSD1306_SWITCHCAPVCC, I2C_ADDRESS, true);
//  oled.clearDisplay();
  splashLogo();
  delay(2000);
  oled.clearDisplay();

  oled.setTextSize(1);
  oled.setTextColor(WHITE);
  oled.setCursor(0, 0);
  oled.setTextWrap(true);

  connectWiFi();
}

void connectWiFi() {
  WiFi.mode(WIFI_STA);

  // Start SmartConfig if necessary
  if (WiFi.SSID() == "") {

    Serial.println("Beginning SmartConfig");
    oled.println("Beginning SmartConfig");
    oled.display();
    WiFi.beginSmartConfig();

    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.print(".");
      oled.print(".");
      oled.display();
      if (WiFi.smartConfigDone()) {
        Serial.println();
        Serial.println("SmartConfig completed");
        oled.println();
        oled.println("SmartConfig completed");
        oled.display();
        WiFi.stopSmartConfig();
        delay(2000);
        break;
      }
    }
  } else {
    Serial.println(String("Using a saved SSID: ") + WiFi.SSID());
    oled.println(String("Using a saved SSID: ") + WiFi.SSID());
    oled.display();
  }

  Serial.print("Connecting..");
  oled.print("Connecting...");
  oled.display();
  WiFi.begin();
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
    oled.print(".");
    oled.display();
  }
  Serial.println("Ok");
  oled.println("Ok");
  oled.display();

  Serial.println(String("My IP: ") + WiFi.localIP().toString());
  oled.println(String("My IP: ") + WiFi.localIP().toString());
  oled.display();
  delay(3000);
}

void displayOff() {
  return oled.ssd1306_command(0xAE);
}

void displayOn() {
  oled.ssd1306_command(0xAF);
}

void loop() {
  btn.read();

  if (btn.wasPressed()) {
    pressedAtMillis = millis();
  }

  if (btn.wasReleased()) {
    if (pressedForMillis > interval) {
      // we have a long press, reset
      displayOn();
      Serial.println("Resetting WiFi credentials");
      oled.invertDisplay(true);
      oled.println("Resetting WiFi credentials");
      oled.display();
      WiFi.disconnect();

      delay(3000);
      ESP.restart();
    } else {
      // short press, turn on the display
      displayOn();
      splashLogo();
      oled.clearDisplay();
      delay(3000);
      // somewhere around mid-screen with this font and size
      oled.setCursor(0, 30);
      oled.println(String("My IP: ") + WiFi.localIP().toString());
      oled.display();
      delay(3000);
      displayOff();
    }
  }

  pressedForMillis = millis() - pressedAtMillis;

  displayOff();

}